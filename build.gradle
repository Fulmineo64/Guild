plugins {
	id 'fabric-loom' version '1.4-SNAPSHOT'
	id 'maven-publish'
	id 'com.matthewprenger.cursegradle' version '1.4.0'
	id "com.modrinth.minotaur" version "2.+"
}

sourceCompatibility = JavaVersion.VERSION_17
targetCompatibility = JavaVersion.VERSION_17

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
	maven { url "https://jitpack.io" }
}

loadProperties()

def loadProperties() {
    def configFile = file('config.groovy')
    def config = new ConfigSlurper().parse(configFile.toURL())
    project.ext.config = config
}

dependencies {
	//To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
  	modImplementation "com.github.ExcessiveAmountsOfZombies:OctoEconomyApi:5137175b1c"

	modRuntimeOnly modImplementation("com.terraformersmc:modmenu:5.1.0") {
		transitive = false
	}

    include modApi("me.shedaniel.cloth:cloth-config-fabric:8.3.103") {
      	transitive = false
	   	exclude(group: "net.fabricmc.fabric-api")
    }
}

loom {
    accessWidenerPath = file("src/main/resources/guild.accesswidener")
}

processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	// Minecraft 1.18 (1.18-pre2) upwards uses Java 17.
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.archivesBaseName}"}
	}
}

// configure the maven publication
publishing {
	publications {
		mavenJava(MavenPublication) {
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

curseforge {
    apiKey = config.curse.api_key
	project {
		id = config.curse.project.id
		changelogType = 'markdown'
		changelog = file('changelog.md')
		releaseType = project.release_type
		addGameVersion project.curse_minecraft_version
		addGameVersion "Fabric"

		relations {
			requiredLibrary 'fabric-api'
			optionalDependency 'cloth-config'
			optionalDependency 'modmenu'
		}

		mainArtifact(file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar")) {
			displayName = "[Fabric $project.minecraft_version] The Guild $version"
		}

		afterEvaluate {
			uploadTask.dependsOn("remapJar")
		}
	}
}

modrinth {
    token = config.modrinth.token // This is the default. Remember to have the MODRINTH_TOKEN environment variable set or else this will fail, or set it to whatever you want - just make sure it stays private!
    projectId = config.modrinth.project.id // This can be the project ID or the slug. Either will work!
    versionNumber = project.mod_version // You don't need to set this manually. Will fail if Modrinth has this version already
    versionType = project.release_type // This is the default -- can also be `beta` or `alpha`
    uploadFile = file("${project.buildDir}/libs/${archivesBaseName}-${version}.jar") // With Loom, this MUST be set to `remapJar` instead of `jar`!
    gameVersions = [project.minecraft_version] // Must be an array, even with only one version
    loaders = ["fabric"] // Must also be an array - no need to specify this if you're using Loom or ForgeGradle
	changelog = new File('changelog.md').text
    dependencies { // A special DSL for creating dependencies
        // scope.type
        // The scope can be `required`, `optional`, `incompatible`, or `embedded`
        // The type can either be `project` or `version`
        required.project "fabric-api" // Creates a new required dependency on Fabric API
        optional.project "cloth-config" // Creates a new optional dependency
        optional.project "modmenu" // Creates a new optional dependency
    }
}